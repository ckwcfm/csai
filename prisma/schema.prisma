generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
  // extensions = [uuid_ossp(schema: "public"), vector]
  extensions = [vector]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  emailVerified  DateTime?
  image          String?
  name           String?
  accounts       Account[]
  agents         Agent[]
  files          File[]
  fileEmbeddings FileEmbedding[]
  sessions       Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Model {
  name      String   @unique
  credits   Int      @default(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  agents    Agent[]
}

model Agent {
  name           String
  description    String?
  prompt         String?
  temperature    Int?             @default(0)
  maxTokens      Int?             @default(1000)
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  enabled        Boolean          @default(false)
  id             Int              @id @default(autoincrement())
  modelId        Int
  model          Model            @relation(fields: [modelId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  agentsAgentTools AgentsAgentTools[]

  @@unique([userId, name])
}

model AgentTool {
  id             BigInt              @id @unique @default(autoincrement())
  created_at     DateTime            @default(now()) @db.Timestamptz(6)
  name           String
  description    String
  type           AgentToolType
  userId         String
  searchPDFTool  AgentSearchPDFTool?
  agentsAgentTools AgentsAgentTools[]

  @@unique([userId, name])
}

model AgentsAgentTools {
  id          BigInt    @id @default(autoincrement())
  agentId     Int
  agentToolId BigInt
  agent       Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentTool   AgentTool @relation(fields: [agentToolId], references: [id], onDelete: Cascade)

  @@unique([agentId, agentToolId])
}

model AgentSearchPDFTool {
  agentToolId BigInt    @id @unique @map("agent_tool_id")
  agentTool   AgentTool @relation(fields: [agentToolId], references: [id], onDelete: Cascade)
  files       File[]    @relation("AgentSearchPDFToolFiles")
}

enum AgentToolType {
  SEARCH_PDF
}

model File {
  filename    String
  key         String
  contentType String
  userId      String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  id          Int                  @id @default(autoincrement())
  summary     String?
  user        User                 @relation(fields: [userId], references: [id])
  embeddings  FileEmbedding[]
  tools       AgentSearchPDFTool[] @relation("AgentSearchPDFToolFiles")

  @@index([userId])
}

model FileEmbedding {
  id        Int                    @id @default(autoincrement())
  fileId    Int
  userId    String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  embedding Unsupported("vector")?
  content   String                 @default("")
  file      File                   @relation(fields: [fileId], references: [id])
  user      User                   @relation(fields: [userId], references: [id])

  @@index([fileId])
}
